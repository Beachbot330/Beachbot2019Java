// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.WPILibVersion;

import org.usfirst.frc330.commands.*;
import org.usfirst.frc330.subsystems.*;
import org.usfirst.frc330.util.*;
import org.usfirst.frc330.util.Logger.Severity;
import org.usfirst.frc330.autoCommands.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Lift lift;
    public static Hand hand;
    public static Pickup pickup;
    public static Frills frills;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Buzzer buzzer;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        lift = new Lift();
        hand = new Hand();
        pickup = new Pickup();
        frills = new Frills();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);

        //Setup the buzzer
        buzzer = new Buzzer(frills.buzzer);
                
        // ---------------------------------------------------------------------
        // Logging
        // ---------------------------------------------------------------------
        
        CSVLoggable temp = new CSVLoggable(false) {
			public double get() { return RobotController.getBatteryVoltage(); }
    	};
    	CSVLogger.getInstance().add("BatteryV", temp);
    	
    	temp = new CSVLoggable(false) {
			public double get() { return DriverStation.getInstance().getMatchTime(); }
    	};
    	CSVLogger.getInstance().add("MatchTime", temp);
    	
    	temp = new CSVLoggable(false) {
			public double get() { 
				if (DriverStation.getInstance().isDisabled())
					return 0.0;
				else if (DriverStation.getInstance().isAutonomous())
					return 1.0;
				else if (DriverStation.getInstance().isOperatorControl())
					return 2.0;
				else
					return -1.0;}
    	};
    	CSVLogger.getInstance().add("RobotMode", temp);
        
        CSVLogger.getInstance().writeHeader();
        
        Logger.getInstance().println("BeachbotLib Version:                " + BeachbotLibVersion.Version, Severity.INFO);
        Logger.getInstance().println("WPILib Version:                     " + WPILibVersion.Version, Severity.INFO);
        Logger.getInstance().println("NavX Firmware Version:              " + chassis.getNavXFirmware(), Severity.INFO);
        //TODO: Update this list:  -AP
/*         Logger.getInstance().println("Talon IntakeLeft Firmware Version:  " + grabber.getIntakeLeftFirmwareVersion(), Severity.INFO);
        Logger.getInstance().println("Talon IntakeRight Firmware Version: " + grabber.getIntakeRightFirmwareVersion(), Severity.INFO);
        Logger.getInstance().println("Talon Wrist Firmware Version:       " + hand.getWristFirmwareVersion(), Severity.INFO);
        Logger.getInstance().println("Talon Lift1 Firmware Version:       " + lift.getLift1FirwareVersion(), Severity.INFO);
        Logger.getInstance().println("Talon Lift2 Firmware Version:       " + lift.getLift2FirwareVersion(), Severity.INFO);
        Logger.getInstance().println("Talon Lift3 Firmware Version:       " + lift.getLift3FirwareVersion(), Severity.INFO); */

        if (getIsPracticeRobot())
        	Logger.getInstance().println("Practice Robot Detected",Severity.DEBUG);
        else
        	Logger.getInstance().println("Competition Robot Detected",Severity.DEBUG);
        // </Logging> ----------------------------------------------------------
        
        buzzer.enable(0.4);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    // -----------------------------------------------------------
    // Get Methods
    // -----------------------------------------------------------

    public boolean getIsPracticeRobot() {
    	return frills.getIsPracticeRobot();
    }

}
