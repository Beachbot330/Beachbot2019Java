// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.commands;
import edu.wpi.first.wpilibj.command.BBCommand;

import java.util.Arrays;

import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.LiftConst;
import org.usfirst.frc330.util.Logger;
import org.usfirst.frc330.util.Logger.Severity;

/**
 *
 */
public class LowerLiftSensor extends BBCommand {

    //TODO: Move the arrays into the constants file;
    
    double currentSetpoint;
    double[] ballPositions = new double[]{
        LiftConst.defense,
        LiftConst.DeployBallLow,
        LiftConst.DeployBallMid,
        LiftConst.DeployBallHi,
    };
    double[] hatchPositions = new double[]{
        LiftConst.defense,
        LiftConst.DeployHatchLow,
        LiftConst.DeployHatchMid,
        LiftConst.DeployHatchHi
    };
    double[] allPositions = new double[]{
        LiftConst.defense,
        LiftConst.DeployBallLow,
        LiftConst.DeployBallMid,
        LiftConst.DeployBallHi,
        LiftConst.DeployHatchLow,
        LiftConst.DeployHatchMid,
        LiftConst.DeployHatchHi
    };

    public LowerLiftSensor() {

        requires(Robot.lift);
        Arrays.sort(ballPositions);
        Arrays.sort(hatchPositions);
        Arrays.sort(allPositions);

    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        currentSetpoint = Robot.lift.getSetpoint();
        double[] sortedArray;
        if(Robot.pickup.getHasBall()){
            sortedArray = ballPositions;
        }
        else if(Robot.pickup.getHasHatch()){
            sortedArray = hatchPositions;
        }
        else{
            sortedArray = allPositions;
            Logger.getInstance().println("Set Lift Postion Using Sensor: Unknown Object!", true, Severity.WARNING);
        }

        for(int i=sortedArray.length-1; i>=0; i--){
            if(sortedArray[i] < currentSetpoint){
                Robot.lift.setLiftPosition(sortedArray[i]);
                break;
            }
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
