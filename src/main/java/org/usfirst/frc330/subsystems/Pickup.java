// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.Robot;
import org.usfirst.frc330.constants.GrabberConst;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import org.usfirst.frc330.util.Logger;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;
import org.usfirst.frc330.wpilibj.SharpIR.SharpType;
import org.usfirst.frc330.wpilibj.SharpIR;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Pickup extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX intake;
    private BBDoubleSolenoid claw;
    private BBDoubleSolenoid ballKicker;
    private SharpIR iRSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private KalmanFilter leftKalman, centerKalman, rightKalman;
    private MedianFilter leftMedian, centerMedian, rightMedian;

    public Pickup() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intake = new WPI_TalonSRX(4);
        
        
        
        claw = new BBDoubleSolenoid(0, 2, 3);
        addChild("Claw",claw);
        
        
        ballKicker = new BBDoubleSolenoid(0, 6, 7);
        addChild("BallKicker",ballKicker);
        
        
        iRSensor = new SharpIR(SharpType.GP2Y0A41SK0F, 1);
        addChild(iRSensor);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //double process_noise, double sensor_noise, double estimated_error, double intial_value
        leftKalman = new KalmanFilter(GrabberConst.kalmanProcessNoise, GrabberConst.kalmanSensorNoise, GrabberConst.kalmanEstimatedError, leftSensor.getDistance());
        centerKalman = new KalmanFilter(GrabberConst.kalmanProcessNoise, GrabberConst.kalmanSensorNoise, GrabberConst.kalmanEstimatedError, middleSensor.getDistance());
        rightKalman = new KalmanFilter(GrabberConst.kalmanProcessNoise, GrabberConst.kalmanSensorNoise, GrabberConst.kalmanEstimatedError, rightSensor.getDistance());
        
        leftMedian = new MedianFilter(GrabberConst.medianSamples);
        centerMedian = new MedianFilter(GrabberConst.medianSamples);
        rightMedian = new MedianFilter(GrabberConst.medianSamples);

    CSVLoggable temp = new CSVLoggable(true) {
        public double get() { return getSensorLDistance(); }
    };
    CSVLogger.getInstance().add("left sensor output", temp);
    
    temp = new CSVLoggable(true) {
        public double get() { return getSensorRDistance(); }
    };
    CSVLogger.getInstance().add("right sensor output", temp);
    
    temp = new CSVLoggable(true) {
        public double get() { return getSensorCDistance(); }
    };
    CSVLogger.getInstance().add("middle sensor output", temp);

    temp = new CSVLoggable(true) {
        public double get() { return leftSensor.getDistance(); }
    };
    CSVLogger.getInstance().add("GrabberIRLeft", temp);
    
    temp = new CSVLoggable(true) {
        public double get() { return middleSensor.getDistance(); }
    };
    CSVLogger.getInstance().add("GrabberIRCenter", temp);
    
    temp = new CSVLoggable(true) {
        public double get() { return rightSensor.getDistance(); }
    };
    CSVLogger.getInstance().add("GrabberIRRight", temp);
    
    temp = new CSVLoggable(true) {
        public double get() { 
            return getNumberOfSensorsReceivingInput();
        }			
    };
    CSVLogger.getInstance().add("Sensors Receiving Input", temp);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        System.out.println(updateSensorLDistance());
    	System.out.println(updateSensorRDistance());
    	System.out.println(updateSensorCDistance());

    }


    private double updateSensorLDistance() {
    	leftKalman.setParameters(Robot.chassis.getSpeed() + GrabberConst.kalmanProcessNoise, leftSensor.getNoise());
    	leftMedian.updateFilteredValue(leftSensor.getDistance());
    	return leftKalman.updateFilteredValue(leftSensor.getDistance());
    }
    
    private double updateSensorCDistance() {
    	centerKalman.setParameters(Robot.chassis.getSpeed() + GrabberConst.kalmanProcessNoise, middleSensor.getNoise());
    	centerMedian.updateFilteredValue(middleSensor.getDistance());
    	return centerKalman.updateFilteredValue(middleSensor.getDistance());
    }
    
    private double updateSensorRDistance() {
    	rightKalman.setParameters(Robot.chassis.getSpeed() + GrabberConst.kalmanProcessNoise, rightSensor.getNoise());
    	rightMedian.updateFilteredValue(rightSensor.getDistance());
    	return rightKalman.updateFilteredValue(rightSensor.getDistance());
    }

    public double getSensorLDistance() {
    	return leftKalman.getFilteredValue();
    }
    
    public double getSensorCDistance() {
    	return centerKalman.getFilteredValue();
    }
    
    public double getSensorRDistance() {
    	return rightKalman.getFilteredValue();
    }

    private int getNumberOfSensorsReceivingInput() { 
    	int numberOfSensorsReceivingInput = 0;
    	if (isSensorReceivingInput(getSensorLDistance())) 
    		numberOfSensorsReceivingInput++;
    	if (isSensorReceivingInput(getSensorRDistance()))  
    		numberOfSensorsReceivingInput++;
    	if (isSensorReceivingInput(getSensorCDistance()))
    		numberOfSensorsReceivingInput++;
    	
    	return numberOfSensorsReceivingInput; 
    }

    private boolean isSensorReceivingInput(double distance) {
    	return distance < GrabberConst.sensorMaxLength;
    }

	public void stopPickup() {
        intake.disable();
        Logger.getInstance().println("Pickup disabled", Logger.Severity.INFO);
        //implemented 2.2.19 -ejo
        //VERIFY the print shouldn't say wrist - JR (fixed 2.10.19 - ejo)
	}

	public void closeClaw() {
        claw.set(DoubleSolenoid.Value.kReverse);
        Logger.getInstance().println("Opening Claw", Logger.Severity.INFO);
        //VERIFY my implment -ejo 2.12.19
	}

	public void openClaw() {
        claw.set(DoubleSolenoid.Value.kForward);
        Logger.getInstance().println("Closing Claw", Logger.Severity.INFO);
        //VERIFY my implment -ejo 2.12.19
	}

	public void rollerOff() {
        intake.stopMotor();
        Logger.getInstance().println("Turning Roller off", Logger.Severity.INFO);
        //VERIFY my implment -ejo 2.12.19
	}

	public void rollerOn() {
        intake.set(GrabberConst.DefaultRollerSpeed);
        Logger.getInstance().println("Turning Roller On", Logger.Severity.INFO);
        //VERIFY my implment -ejo 2.12.19
    }

    public void rollerOn(double speed) {
        intake.set(speed);
        Logger.getInstance().println("Turning Roller On to " +speed +"% speed", Logger.Severity.INFO);
        //VERIFY my implment -ejo 2.12.19
    }
    
    public void ballKickExtend(){
        ballKicker.set(Value.kForward);
    }

    public void ballKickRetract(){
        ballKicker.set(Value.kReverse);
    }

    //Ball nested deeply in hand, or hatch in claw
	public boolean getHasObject() {
        //TODO Implement
        return false;
	}

    //Triggered when limit switches engage
	public boolean getHatchAligned() {
        //TODO Implement
		return false;
	}

    //Ball is in range of the rollers
	public boolean getBallInRange() {
		return false;
	}

	public boolean getHasBall() {
        //TODO Implement
		return false;
    }
    
    public boolean getHasHatch() {
        //TODO Implement
		return false;
    }
    
    public double getIntakeFirmwareVersion() {
		int firmwareVersion = intake.getFirmwareVersion();
		return ((firmwareVersion & 0xFF00) >> 8) + (firmwareVersion & 0xFF) / 100.0;
	}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

