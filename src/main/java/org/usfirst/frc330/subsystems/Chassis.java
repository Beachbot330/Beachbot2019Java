// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330.subsystems;


import org.usfirst.frc330.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SPI.Port;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import org.usfirst.frc330.wpilibj.BBDoubleSolenoid;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private AHRS navX1;
    private BBDoubleSolenoid shifters;
    private Encoder driveEncoderRight;
    private Encoder driveEncoderLeft;
    private Spark rightDrive1;
    private Spark rightDrive2;
    private Spark rightDrive3;
    private SpeedControllerGroup rightDrive;
    private Spark leftDrive1;
    private Spark leftDrive2;
    private Spark leftDrive3;
    private SpeedControllerGroup leftDriive;
    private AnalogInput pressureSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Chassis() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        navX1 = new AHRS(Port.kMXP, (byte)50);
        addChild(navX1);
        
        
        shifters = new BBDoubleSolenoid(0, 0, 1);
        addChild("Shifters",shifters);
        
        
        driveEncoderRight = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("DriveEncoderRight",driveEncoderRight);
        driveEncoderRight.setDistancePerPulse(1.0);
        driveEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        
        driveEncoderLeft = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("DriveEncoderLeft",driveEncoderLeft);
        driveEncoderLeft.setDistancePerPulse(1.0);
        driveEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        
        rightDrive1 = new Spark(0);
        addChild("rightDrive1",rightDrive1);
        rightDrive1.setInverted(false);
        
        rightDrive2 = new Spark(1);
        addChild("rightDrive2",rightDrive2);
        rightDrive2.setInverted(false);
        
        rightDrive3 = new Spark(2);
        addChild("rightDrive3",rightDrive3);
        rightDrive3.setInverted(false);
        
        rightDrive = new SpeedControllerGroup(rightDrive1, rightDrive2  );
        addChild("rightDrive",rightDrive);
        
        
        leftDrive1 = new Spark(3);
        addChild("leftDrive1",leftDrive1);
        leftDrive1.setInverted(false);
        
        leftDrive2 = new Spark(4);
        addChild("leftDrive2",leftDrive2);
        leftDrive2.setInverted(false);
        
        leftDrive3 = new Spark(5);
        addChild("leftDrive3",leftDrive3);
        leftDrive3.setInverted(false);
        
        leftDriive = new SpeedControllerGroup(leftDrive1, leftDrive2  );
        addChild("leftDriive",leftDriive);
        
        
        pressureSensor = new AnalogInput(0);
        addChild("pressureSensor",pressureSensor);
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

