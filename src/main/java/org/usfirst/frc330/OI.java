// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

import org.usfirst.frc330.commands.*;
//import org.usfirst.frc330.commands.commandgroups.*;
import org.usfirst.frc330.commands.commandgroups.*;

import edu.wpi.first.wpilibj.Joystick;

//TODO Fix this bad boi roight hereeee  - JB

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driverL;
    public Joystick driverR;
    public Joystick gamePad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamePad = new Joystick(2);
        
        driverR = new Joystick(1);
        
        driverL = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("KillAll", new KillAll());
        SmartDashboard.putData("ReversePickup", new ReversePickup());
        SmartDashboard.putData("RaiseLift", new RaiseLift());
        SmartDashboard.putData("LowerLift", new LowerLift());
        SmartDashboard.putData("RaiseLiftBall", new RaiseLiftBall());
        SmartDashboard.putData("LowerLiftBall", new LowerLiftBall());
        SmartDashboard.putData("RaiseLiftHatch", new RaiseLiftHatch());
        SmartDashboard.putData("LowerLiftHatch", new LowerLiftHatch());
        SmartDashboard.putData("HandOut", new HandOut());
        SmartDashboard.putData("LoadHatch", new LoadHatch());
        SmartDashboard.putData("LoadBall", new LoadBall());
        SmartDashboard.putData("AutoStear", new AutoStear());
        SmartDashboard.putData("ClimbDeploy", new ClimbDeploy());
        SmartDashboard.putData("Climb", new Climb());
        SmartDashboard.putData("EjectBall", new EjectBall());
        SmartDashboard.putData("ShiftHigh", new ShiftHigh());
        SmartDashboard.putData("ShiftLow", new ShiftLow());
        SmartDashboard.putData("Defense", new Defense());
        SmartDashboard.putData("PickupOff", new PickupOff());
        SmartDashboard.putData("CloseClaw", new CloseClaw());
        SmartDashboard.putData("OpenClaw", new OpenClaw());
        SmartDashboard.putData("CalibrateLift", new CalibrateLift());
        SmartDashboard.putData("TankDrive", new TankDrive());
        SmartDashboard.putData("RollerOn", new RollerOn());
        SmartDashboard.putData("RollerOff", new RollerOff());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverL() {
        return driverL;
    }

    public Joystick getDriverR() {
        return driverR;
    }

    public Joystick getgamePad() {
        return gamePad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

