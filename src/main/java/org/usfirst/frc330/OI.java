// RobotBuilder Version: 2.0BB
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc330;

import org.usfirst.frc330.commands.*;
//import org.usfirst.frc330.commands.commandgroups.*;
import org.usfirst.frc330.commands.commandgroups.*;

import edu.wpi.first.wpilibj.Joystick;

//TODO Fix this bad boi roight hereeee  - JB

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton 1_ShiftLow;
    public JoystickButton 2_ClimbDeploy_WH;
    public JoystickButton 3_AutoStear_WH;
    public JoystickButton 4_EjectBall;
    public JoystickButton 5_EjectBall;
    public Joystick driverL;
    public JoystickButton 1_ShiftHigh;
    public JoystickButton 4R_EjectBall;
    public JoystickButton 5R_EjectBall;
    public JoystickButton 3_Climb_WH;
    public Joystick driverR;
    public JoystickButton 1_LoadHatch_WH;
    public JoystickButton 1_Defense_WR;
    public JoystickButton 2_BallPickup_WH;
    public JoystickButton 2_Defense_WR;
    public JoystickButton 3_LoadHatch_WH;
    public JoystickButton 3_Defense_WR;
    public JoystickButton 4_HandOut_WH;
    public JoystickButton 5_RaiseLift;
    public JoystickButton 6_OpenClawReverseRoller;
    public JoystickButton 7_LowerLift;
    public JoystickButton 9_HatchRelese;
    public JoystickButton 10_KillAll;
    public Joystick gamePad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamePad = new Joystick(2);
        
        10_KillAll = new JoystickButton(gamePad, 10);
        10_KillAll.whenPressed(new KillAll());
        9_HatchRelese = new JoystickButton(gamePad, 9);
        9_HatchRelese.whenPressed(new HatchRelease());
        7_LowerLift = new JoystickButton(gamePad, 7);
        7_LowerLift.whenPressed(new LowerLift());
        6_OpenClawReverseRoller = new JoystickButton(gamePad, 6);
        6_OpenClawReverseRoller.whileHeld(new OpenClawReverseRoller());
        5_RaiseLift = new JoystickButton(gamePad, 5);
        5_RaiseLift.whenPressed(new RaiseLift());
        4_HandOut_WH = new JoystickButton(gamePad, 4);
        4_HandOut_WH.whileHeld(new HandOut());
        3_Defense_WR = new JoystickButton(gamePad, 3);
        3_Defense_WR.whenReleased(new Defense());
        3_LoadHatch_WH = new JoystickButton(gamePad, 3);
        3_LoadHatch_WH.whileHeld(new LoadHatch());
        2_Defense_WR = new JoystickButton(gamePad, 2);
        2_Defense_WR.whenReleased(new Defense());
        2_BallPickup_WH = new JoystickButton(gamePad, 2);
        2_BallPickup_WH.whileHeld(new LoadBall());
        1_Defense_WR = new JoystickButton(gamePad, 1);
        1_Defense_WR.whenReleased(new Defense());
        1_LoadHatch_WH = new JoystickButton(gamePad, 1);
        1_LoadHatch_WH.whileHeld(new LoadHatch());
        driverR = new Joystick(1);
        
        3_Climb_WH = new JoystickButton(driverR, 3);
        3_Climb_WH.whileHeld(new Climb());
        5R_EjectBall = new JoystickButton(driverR, 5);
        5R_EjectBall.whenPressed(new EjectBall());
        4R_EjectBall = new JoystickButton(driverR, 4);
        4R_EjectBall.whenPressed(new EjectBall());
        1_ShiftHigh = new JoystickButton(driverR, 1);
        1_ShiftHigh.whenPressed(new ShiftHigh());
        driverL = new Joystick(0);
        
        5_EjectBall = new JoystickButton(driverL, 5);
        5_EjectBall.whenPressed(new EjectBall());
        4_EjectBall = new JoystickButton(driverL, 4);
        4_EjectBall.whenPressed(new EjectBall());
        3_AutoStear_WH = new JoystickButton(driverL, 3);
        3_AutoStear_WH.whileHeld(new AutoStear());
        2_ClimbDeploy_WH = new JoystickButton(driverL, 2);
        2_ClimbDeploy_WH.whileHeld(new ClimbDeploy());
        1_ShiftLow = new JoystickButton(driverL, 1);
        1_ShiftLow.whenPressed(new ShiftLow());


        // SmartDashboard Buttons
        SmartDashboard.putData("KillAll", new KillAll());
        SmartDashboard.putData("ReversePickup", new ReversePickup());
        SmartDashboard.putData("RaiseLift", new RaiseLift());
        SmartDashboard.putData("LowerLift", new LowerLift());
        SmartDashboard.putData("RaiseLiftSensor", new RaiseLiftSensor());
        SmartDashboard.putData("LowerLiftSensor", new LowerLiftSensor());
        SmartDashboard.putData("HandOut", new HandOut());
        SmartDashboard.putData("LoadHatch", new LoadHatch());
        SmartDashboard.putData("LoadBall", new LoadBall());
        SmartDashboard.putData("AutoStear", new AutoStear());
        SmartDashboard.putData("ClimbDeploy", new ClimbDeploy());
        SmartDashboard.putData("Climb", new Climb());
        SmartDashboard.putData("EjectBall", new EjectBall());
        SmartDashboard.putData("ShiftHigh", new ShiftHigh());
        SmartDashboard.putData("ShiftLow", new ShiftLow());
        SmartDashboard.putData("Defense", new Defense());
        SmartDashboard.putData("PickupOff", new PickupOff());
        SmartDashboard.putData("CloseClaw", new CloseClaw());
        SmartDashboard.putData("OpenClaw", new OpenClaw());
        SmartDashboard.putData("CalibrateLift", new CalibrateLift());
        SmartDashboard.putData("TankDrive", new TankDrive());
        SmartDashboard.putData("RollerOn", new RollerOn());
        SmartDashboard.putData("RollerOff", new RollerOff());
        SmartDashboard.putData("OpenClawReverseRoller", new OpenClawReverseRoller());
        SmartDashboard.putData("HatchRelease", new HatchRelease());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverL() {
        return driverL;
    }

    public Joystick getDriverR() {
        return driverR;
    }

    public Joystick getgamePad() {
        return gamePad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

